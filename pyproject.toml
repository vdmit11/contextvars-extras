[tool.poetry]
name = "contextvars-registry"
version = "0.3.0"
description = "Contextvars made easy (WARNING: unstable alpha version. Things may break)."
license = "MIT"
authors = ["Dmitry Vasilyanov <vdmit11@gmail.com>"]
readme = "README.rst"
repository = "https://github.com/vdmit11/contextvars-registry"
documentation = "https://contextvars-registry.readthedocs.io"
keywords = ["contextvars", "context", "async", "threading", "gevent"]
exclude = []
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",  
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
]


[tool.poetry.dependencies]
python = "^3.8.10"
sentinel-value = "^1.0.0"


[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
tox = "^3.24.4"
Sphinx = "^4.2.0"
sphinx-toggleprompt = "^0.0.5"
sphinx-copybutton = "^0.4.0"
radon = "^5.1.0"
mypy = "^0.910"
Flask = {extras = ["async"], version = "^2.0.2"}
gevent = "^21.8.0"
sphinx-rtd-theme = "^1.0.0"
pytest-cov = "^3.0.0"
python-semantic-release = "^7.19.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
upload_to_pypi = true
upload_to_release = true
build_command = "poetry build"
major_on_zero = false

[tool.pytest.ini_options]
norecursedirs = "build dist .tox"
addopts = """
    --maxfail=2
    --doctest-modules
    --doctest-glob='*.rst'
    --cov-report=term-missing:skip-covered
    --ignore='./playground.py'
    --ignore-glob='**/.*.py'
    --ignore-glob='.*.py'
    -W ignore::DeprecationWarning
"""

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if 0:",
    "raise AssertionError",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
    "@overload",
]

[tool.mypy]
python_version = 3.8
show_error_codes = true
# Enable some strict checks. It is like `mypy --strict`,
# except for several options that bring too little benefit
# and take too much effort to implement on this project.
warn_unused_configs = true
disallow_subclassing_any = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
no_implicit_reexport = true
strict_equality = true
